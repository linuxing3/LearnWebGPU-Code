add_rules('mode.debug', 'mode.release')

-- dependencies
package('glfw')
add_deps('cmake')
set_sourcedir(path.join(os.scriptdir(), 'glfw'))
add_deps("libx11", "libxrandr", "libxrender", "libxinerama", "libxfixes", "libxcursor", "libxi", "libxext")
add_syslinks("dl", "pthread")
add_defines("_GLFW_X11")
on_install(function(package)
    local configs = {}
    table.insert(configs, '-DCMAKE_BUILD_TYPE=' .. (package:debug() and 'Debug' or 'Release'))
    table.insert(configs, '-DBUILD_SHARED_LIBS=' .. (package:config('shared') and 'ON' or 'OFF'))
    table.insert(configs, '-DGLFW_EXPOSE_NATIVE_X11')
    import('package.tools.cmake').install(package, configs)
end)
package_end()

package('webgpu')
add_deps('cmake')
set_sourcedir(path.join(os.scriptdir(), 'webgpu'))
on_install(function(package)
    local configs = {}
    table.insert(configs, '-DCMAKE_BUILD_TYPE=' .. (package:debug() and 'Debug' or 'Release'))
    table.insert(configs, '-DBUILD_SHARED_LIBS=' .. (package:config('shared') and 'ON' or 'OFF'))
    table.insert(configs, '-DDEV_MODE=On')
    import('package.tools.cmake').install(package, configs)
end)                                                                                                
package_end()

package('glfw3webgpu')
add_deps('cmake')
add_deps('glfw')
add_deps('webgpu')
set_sourcedir(path.join(os.scriptdir(), 'glfw3webgpu'))
on_install(function(package)
    local configs = {}
    table.insert(configs, '-DCMAKE_BUILD_TYPE=' .. (package:debug() and 'Debug' or 'Release'))
    table.insert(configs, '-DBUILD_SHARED_LIBS=' .. (package:config('shared') and 'ON' or 'OFF'))
    table.insert(configs, '-DGLFW_EXPOSE_NATIVE_X11')
    import('package.tools.cmake').install(package, configs)
end)
package_end()

package('imgui')
add_deps('cmake')
add_deps('glfw')
set_sourcedir(path.join(os.scriptdir(), 'imgui'))
add_defines('WEBGPU_BACKEND_WGPU')
on_install(function(package)
    local configs = {}
    table.insert(configs, '-DCMAKE_BUILD_TYPE=' .. (package:debug() and 'Debug' or 'Release'))
    table.insert(configs, '-DBUILD_SHARED_LIBS=' .. (package:config('shared') and 'ON' or 'OFF'))
    table.insert(configs, '-DWEBGPU_BACKEND_WGPU=On')
    import('package.tools.cmake').install(package, configs)
end)
package_end()

-- requires
add_requires('glfw')
add_requires('webgpu')
add_requires('glfw3webgpu')
add_requires('imgui')

-- target
target('wgpuApp')
set_kind('binary')
set_targetdir('build')
add_defines("RESOURCE_DIR=\"./resources\"")
add_defines("WGPU_TARGET=WGPU_TARGET_LINUX_X11")
add_defines("GLFW_EXPOSE_NATIVE_X11")
add_files('main.cpp', 'Application.cpp', 'ResourceManager.cpp', 'Camera.cpp', 'Renderer.cpp', 'implementations.cpp')
add_files('Walnut/**.cpp')
add_includedirs("webgpu/include/webgpu")
add_includedirs("imgui")
add_includedirs("glfw3webgpu")
add_includedirs(".")
-- add_packages('glfw')
-- add_packages('webgpu')
-- add_packages('glfw3webgpu')
-- add_packages('imgui')
add_linkdirs('./build/glfw/src')
add_links('glfw3')
add_linkdirs('./build/glfw3webgpu')
add_links('glfw3webgpu')
add_linkdirs('./build/imgui')
add_links('imgui')
add_linkdirs(path.join(os.scriptdir(), './build'))
add_links('tbb','pthread', 'wgpu', 'wgpu_native')
add_links("X11", "Xrandr", "Xrender", "Xinerama", "Xfixes", "Xcursor", "Xi", "Xext")
after_build(function(target)
    local wgpu_path = path.join("build", 'wgpu.so')
    if os.exists(wgpu_path) then
        os.cp(wgpu_path, target:targetdir())
    end
end)
